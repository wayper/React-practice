{"version":3,"sources":["serviceWorker.js","components/app_header.js","components/search_panel.js","components/todo_list_item/todo_list_item.js","components/todo_list/todo_list.js","components/add_tasks_panel/add_tasks_panel.js","components/item-status-filter.js","components/theme_change/tneme_change.js","index.js"],"names":["Boolean","window","location","hostname","match","AppHeader","SearchPanel","state","searchText","onSearchChange","e","target","value","setState","props","type","className","placeholder","this","onChange","Component","TodoListItem","textTask","onDelete","onCompleted","onImportant","done","important","onClick","aria-hidden","contentEditable","role","aria-label","Todolist","todoData","filters","all","active","elements","map","id","otherProps","key","AddTasksPanel","inputValue","inputValid","onLabelChange","onSubmitForm","preventDefault","length","addHandleTask","onSubmit","maxLength","ItemStatusFilter","onBtnAll","onBtnActive","onBtnDone","allTasks","activeTasks","ThemeChangePanel","onBtnLight","onBtnDark","onBtnColor","App","theme","light","dark","color","filterSearch","onBtnDeleteTask","filter","el","text","newTask","Math","random","toString","slice","console","log","changeStatusTasks","arr","propName","index","findIndex","newArr","onBtnCompletedTask","onBtnImportantTask","changeStatusFilter","obj","newObj","textSearch","changeTheme","arrTasks","searhText","item","toLowerCase","indexOf","visibleItems","filterSearchDo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68fe9c37.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst AppHeader = () => {\n    return <h1>My tasks</h1>\n};\n\nexport default AppHeader;","import React, { Component } from 'react';\n\nexport default class SearchPanel extends Component {\n\n    state = {\n        searchText: '',\n    }\n\n    onSearchChange = (e) => {\n        const searchText = e.target.value;\n        this.setState({ searchText });\n        this.props.onSearchChange(searchText);\n    }\n\n    render() {\n        return <input \n            type=\"text\"\n            className=\"form-control mr-2\" \n            placeholder=\"search\"\n            value={ this.state.searchText }\n            onChange={ this.onSearchChange } />\n    };\n};\n\n;","import React from 'react';\n\nconst TodoListItem = ({ textTask, onDelete, onCompleted, onImportant, done, important }) => {\n\n    return (\n        <span className=\"d-flex justify-content-between\">\n            <button onClick={onCompleted} type=\"button\" className=\"btn btn-outline-secondary align-self-center p-1\"><i className=\"fa fa-check\" aria-hidden=\"true\"></i></button>\n            <span\n                contentEditable=\"true\"\n                className={`align-self-center flex-grow-1 text-left mx-2\n                                ${important ? 'font-weight-bold' : ''}\n                                ${done ? 'text-muted' : ''}`\n                }>\n                {done ? <s>{textTask}</s> : textTask}\n            </span>\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                <button onClick={onDelete} type=\"button\" className=\"btn btn-outline-secondary align-self-center p-1 px-2 mr-1\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button>\n                <button onClick={onImportant} type=\"button\" className=\"btn btn-outline-secondary align-self-center p-1 px-2\"><i className=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i></button>\n            </div>\n        </span>\n    );\n}\n\nexport default TodoListItem;\n","import React from 'react';\n\nimport TodoListItem from '../todo_list_item/todo_list_item';\n\nimport './todo_list.css'\n\nconst Todolist = ({ todoData, onDelete, onCompleted, onImportant, filters }) => {\n\n    const { all, active, done } = filters;\n    const elements = todoData.map(({ id, ...otherProps }) => {\n\n        return (\n            <li key={id}  className={`list-group-item list-group-item-action py-1 px-1 shadow-sm mb-1 rounded\n                                         ${(done && otherProps.done) ? '' : (active && !otherProps.done) ? '' : (all) ? '' : 'item-display-none' }`}>\n                <TodoListItem \n                    {...otherProps}\n                    onDelete={ () => onDelete(id) }\n                    onCompleted={ () => onCompleted(id) }\n                    onImportant={ () => onImportant(id) } />\n            </li>);\n    });\n\n    return (\n            <ul className=\"d-flex list-group my-3\">\n                {elements}\n            </ul>\n    );\n};\n\nexport default Todolist;","import React, { Component } from 'react';\n\nimport './add_tasks_panel.css';\n\nexport default class AddTasksPanel extends Component {\n\n    state = {\n        inputValue: '',\n        inputValid: true,\n    };\n\n    onLabelChange = (e) => {\n        this.setState({\n            inputValue: e.target.value\n        });\n    };\n\n    onSubmitForm = (e) => {\n        e.preventDefault();\n        if (this.state.inputValue.length > 3) {\n            this.props.addHandleTask(this.state.inputValue);\n            this.setState({\n                inputValue: '',\n                inputValid: true, \n            });\n        } else {\n            this.setState({\n                inputValid: false, \n            });\n        }\n    };\n\n    render() {\n        const { inputValue, inputValid } = this.state;\n\n        return (\n            <form className=\"d-flex add-tasks-panel mt-2 mb-4\" onSubmit={ this.onSubmitForm }>\n                    <input\n                        type=\"text\"\n                        className={ `form-control mr-2 ${ inputValid ? '' : 'is-invalid' }` }\n                        onChange={ this.onLabelChange }\n                        placeholder=\"+ new task\"\n                        value={ inputValue }\n                        maxLength={50}\n                    />\n                    <div className={ `valid-feedback ${ inputValid ? '' : 'valid' }` }>Must be more than 3 characters!у</div>\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"submit\"\n                    >Add</button>\n            </form>\n        );\n    }\n};","import React, { Component } from 'react';\n\nexport default class ItemStatusFilter extends Component {\n    render () {\n        const { onBtnAll, onBtnActive, onBtnDone, filters, allTasks, activeTasks } = this.props;\n        const { all, active, done } = filters;\n        return (\n            <div className=\"btn-group ml-2\" role=\"group\" aria-label=\"Basic example\">\n                <button type=\"button\" \n                    className={`btn btn-outline-secondary px-1 ${all ? 'font-weight-bold' : ''}`}\n                    onClick={ onBtnAll }\n                    >All <span className=\"badge badge-secondary\">{allTasks}</span>\n                </button>\n                <button type=\"button\" \n                    className={`btn btn-outline-secondary px-1 ${active ? 'font-weight-bold' : ''}`}\n                    onClick={ onBtnActive }\n                    >Active <span className=\"badge badge-secondary\">{activeTasks}</span>\n                </button>\n                <button type=\"button\" \n                    className={`btn btn-outline-secondary px-1 ${done ? 'font-weight-bold' : ''}`}\n                    onClick={ onBtnDone }\n                    >Done <span className=\"badge badge-secondary\">{allTasks - activeTasks}</span>\n                </button>\n            </div>);\n    }\n}","import React, { Component } from 'react';\n\nimport './theme_change.css';\n\nclass ThemeChangePanel extends Component {\n    render() {\n        const { onBtnLight, onBtnDark, onBtnColor } = this.props;\n        return (\n            <div className=\"btn-group-vertical theme-change-panel\" role=\"group\" aria-label=\"Basic example\">\n                <button onClick={onBtnLight} type=\"button\" className=\"btn btn-light\">Light</button>\n                <button onClick={onBtnDark} type=\"button\" className=\"btn btn-dark\">Dark</button>\n                <button onClick={onBtnColor} type=\"button\" className=\"btn btn-warning text-success\">Color</button>\n                <button type=\"button\" className=\"btn btn-secondary\">Theme</button>\n            </div>\n            );\n    }\n}\n\nexport default ThemeChangePanel;","import React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport AppHeader from './components/app_header';\nimport SearchPanel from './components/search_panel';\nimport Todolist from './components/todo_list/todo_list';\nimport AddTasksPanel from './components/add_tasks_panel/add_tasks_panel';\nimport ItemStatusFilter from './components/item-status-filter';\nimport ThemeChangePanel from './components/theme_change/tneme_change';\n\nimport './index.css';\n\n\nclass App extends Component {\n\n    state = {\n        todoData: [\n            {\n                id: 1,\n                textTask: 'Drink Coffee',\n                important: false,\n                done: false,\n            },\n            {\n                id: 2,\n                textTask: 'Build React App',\n                important: false,\n                done: false,\n            },\n            {\n                id: 3,\n                textTask: 'Learn Redux',\n                important: false,\n                done: true,\n            },\n        ],\n        theme: {\n            light: true,\n            dark: false,\n            color: false,\n        },\n        filters: {\n            all: true,\n            active: false,\n            done: false,\n        },\n        filterSearch: '',\n    };\n\n    onBtnDeleteTask = (id) => {\n        this.setState(({ todoData }) => {\n            const newTodoData = todoData.filter((el) => el.id !== id);\n            return {\n                todoData: newTodoData\n            };\n        })\n    };\n\n    addHandleTask = (text) => {\n        // 1. Generate a pseudo-random number;\n        // 2. Return the string representation of the number in hexadecimal notation;\n        // 3. First we cut off \"0.\" and extract the \"n\" characters\n        const idGenerated = Math.random().toString(16).slice(2, 15);\n\n        const newTask = {\n            textTask: text,\n            id: idGenerated,\n        }\n\n        this.setState(({ todoData }) => {\n            const newTodoData = [...todoData, newTask];\n            return {\n                todoData: newTodoData\n            }\n        })\n\n\n        console.log('Add task!', text);\n    };\n\n    // Change the status of tasks (important / regular, completed / unfulfilled)\n    changeStatusTasks = (arr, id, propName) => {\n        const index = arr.findIndex((el) => el.id === id);\n        const newArr = [...arr];\n        newArr[index][propName] = !newArr[index][propName];\n\n        return newArr\n    };\n\n    onBtnCompletedTask = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.changeStatusTasks(todoData, id, 'done')\n            };\n        })\n    };\n\n    onBtnImportantTask = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.changeStatusTasks(todoData, id, 'important')\n            };\n        })\n    }\n\n    // Filters (all, active, done)\n    changeStatusFilter = (obj, propName) => {\n        const newObj = { ...obj };\n        for (let key in newObj) {\n            if (key === propName) {\n                newObj[key] = true;\n            } else {\n                newObj[key] = false;\n            }\n        }\n        return newObj\n    };\n\n    onBtnAll = () => {\n        this.setState(({ filters }) => {\n            return {\n                filters: this.changeStatusFilter(filters, 'all')\n            };\n        })\n    }\n\n    onBtnActive = () => {\n        this.setState(({ filters }) => {\n            return {\n                filters: this.changeStatusFilter(filters, 'active')\n            };\n        })\n    }\n\n    onBtnDone = () => {\n        this.setState(({ filters }) => {\n            return {\n                filters: this.changeStatusFilter(filters, 'done')\n            };\n        })\n    }\n\n    // Filter SEARCH PANEL\n    onSearchChange = (textSearch) => {\n        this.setState({\n            filterSearch: textSearch\n        });\n    }\n\n    filterSearchDo(arrTasks, searhText) {\n        if (searhText === 0) {\n            return arrTasks;\n        }\n        return arrTasks.filter((item) => {\n            return item.textTask.toLowerCase().indexOf(searhText.toLowerCase()) > -1;\n        });\n    }\n\n    // Change Theme\n\n    changeTheme = (obj, propName) => {\n        const newObj = { ...obj };\n        for (let key in newObj) {\n            if (key === propName) {\n                newObj[key] = true;\n            } else {\n                newObj[key] = false;\n            }\n        }\n        return newObj\n    };\n\n    onBtnLight = () => {\n        this.setState(({ theme }) => {\n            return {\n                theme: this.changeTheme(theme, 'light')\n            };\n        })\n    }\n\n    onBtnDark = () => {\n        this.setState(({ theme }) => {\n            return {\n                theme: this.changeTheme(theme, 'dark')\n            };\n        })\n    }\n\n    onBtnColor = () => {\n        this.setState(({ theme }) => {\n            return {\n                theme: this.changeTheme(theme, 'color')\n            };\n        })\n    }\n\n    render() {\n\n        const { todoData, filters, filterSearch } = this.state;\n        const visibleItems = this.filterSearchDo(todoData, filterSearch);\n        const allTasks = todoData.length;\n        const activeTasks = todoData.filter((el) => !el.done).length;\n        const { light, dark } = this.state.theme;\n\n        return (\n            <Fragment>\n                <div className={`d-flex justify-content-center ${light ? 'bg-light' : dark ? 'bg-dark' : 'bg-warning'}`}>\n                    <ThemeChangePanel\n                        onBtnLight={this.onBtnLight}\n                        onBtnDark={this.onBtnDark}\n                        onBtnColor={this.onBtnColor} />\n                    <div className=\"d-flex flex-column align-items-stretch col-12 col-sm-9 col-md-7 col-lg-6 col-xl-5\">\n                        <div className={`text-center ${light ? 'text-dark' : dark ? 'text-light' : 'text-success'}`} >\n                            <AppHeader />\n                        </div>\n                        <div className=\"d-inline-flex flex-column flex-md-row flex-sm-column justify-content-between flex-row\">\n                            <div className=\"flex-grow-1 mb-2\">\n                                <SearchPanel\n                                    onSearchChange={this.onSearchChange} />\n                            </div>\n                            <div className=\"\">\n                                <ItemStatusFilter\n                                    onBtnAll={this.onBtnAll}\n                                    onBtnActive={this.onBtnActive}\n                                    onBtnDone={this.onBtnDone}\n                                    filters={filters}\n                                    allTasks={allTasks}\n                                    activeTasks={activeTasks} />\n                            </div>\n                        </div>\n                        <div> {/*className=\"d-flex flex-column flex-md-row flex-sm-column justify-content-between flex-row\"*/}\n                            <AddTasksPanel\n                                addHandleTask={this.addHandleTask} />\n                            <Todolist\n                                todoData={visibleItems}\n                                onDelete={this.onBtnDeleteTask}\n                                onCompleted={this.onBtnCompletedTask}\n                                onImportant={this.onBtnImportantTask}\n                                filters={filters} />\n\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n        );\n    }\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}